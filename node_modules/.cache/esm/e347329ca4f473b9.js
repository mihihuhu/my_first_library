let sqlite3,open;_a4f‍.w("sqlite3",[["default",["sqlite3"],function(v){sqlite3=v}]]);_a4f‍.w("sqlite",[["open",["open"],function(v){open=v}]]);



var express = require("express")
var app = express()
var db = require("./database.js")


var bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

const dbPromise = open({
    filename: 'db.sqlite',
    driver: sqlite3.Database
})


//Get a List of books
app.get("/api/books", async(req, res, next) => {
    const db= await dbPromise;
    const sql = await db.all("select * from book;")
    _a4f‍.g.console.log(sql)
    var params = []
    db.all(sql, params, (err, rows) => {
        if (err) {
          res.status(400).json({"error":err.message});
          return;
        }
        res.json({
            "message":"success",
            "data":rows
        })
      });
});

//Get a single book by id
app.get("/api/book/:id", (req, res, next) => {
    var sql = "select * from book where id = ?"
    var params = [req.params.id]
    db.get(sql, params, (err, row) => {
        if (err) {
          res.status(400).json({"error":err.message});
          return;
        }
        res.json({
            "message":"success",
            "data":row
        })
      });
});

//Create a new book
app.post("/api/book/", (req, res, next) => {
    var errors=[]
    if (!req.body.name){
        errors.push("No book specified");
    }
    if (!req.body.author){
        errors.push("No author specified");
    }
    if (errors.length){
        res.status(400).json({"error":errors.join(",")});
        return;
    }
    var data = {
        name: req.body.name,
        email: req.body.author,
        noPages: req.body.noPages
    }
    var sql ='INSERT INTO book (name, author, noPages) VALUES (?,?,?)'
    var params =[data.name, data.author, data.noPages]
    db.run(sql, params, function (err, result) {
        if (err){
            res.status(400).json({"error": err.message})
            return;
        }
        res.json({
            "message": "success",
            "data": data,
            "id" : this.lastID
        })
    });
})

//Delete a book
app.delete("/api/book/:id", (req, res, next) => {
    db.run(
        'DELETE FROM book WHERE id = ?',
        req.params.id,
        function (err, result) {
            if (err){
                res.status(400).json({"error": res.message})
                return;
            }
            res.json({"message":"deleted", changes: this.changes})
    });
})

// Root path
app.get("/", (req, res, next) => {
    res.json({"message":"Ok"})
});


const setup = async () => {
    const db = await dbPromise
    await db.migrate()
    app.listen(5500, () => {
        console.log("Server running on localhost:5500")
})
}
setup()
